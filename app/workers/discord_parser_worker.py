import discord
from discord.ext import commands
import asyncio
import os
import re
from datetime import datetime
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorDatabase
import sys
from telegram import Bot

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from mongo_init import get_db

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Discord
DISCORD_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID', '1421601402425311362'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN) if TELEGRAM_BOT_TOKEN else None

# –í–∫–ª—é—á–∞–µ–º intents
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.messages = True

bot = commands.Bot(command_prefix="!", intents=intents)

# MongoDB collections
db: AsyncIOMotorDatabase = None

async def send_notifications(stock_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not telegram_bot:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscriptions = await db.plant_subscriptions.find({}).to_list(length=None)
    
    # –û—Ç–ª–∞–¥–∫–∞ - –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Å—Ç–æ–∫–µ
    print("\n=== –ù–û–í–´–ô –°–¢–û–ö ===")
    print("–°–µ–º–µ–Ω–∞:", stock_data.get('seeds_stock', {}))
    print("–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:", stock_data.get('gear_stock', {}))
    
    for subscription in subscriptions:
        user_id = subscription.get('user_id')
        subscribed_items = subscription.get('items', [])
        
        if not subscribed_items:
            continue
            
        print(f"\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {subscribed_items}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matched_items = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–µ–Ω–∞
        for seed_name, quantity in stock_data.get('seeds_stock', {}).items():
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            normalized = seed_name.lower().replace(' ', '_')
            seed_key = f"{normalized}_seed" if not normalized.endswith('_seed') else normalized
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if (normalized in subscribed_items or 
                seed_key in subscribed_items or
                f"{normalized.replace('_', '')}_seed" in subscribed_items):
                matched_items.append(f"üå± {seed_name}: {quantity}")
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Å–µ–º–µ–Ω–∏: {seed_name} -> {seed_key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ  
        for gear_name, quantity in stock_data.get('gear_stock', {}).items():
            normalized = gear_name.lower().replace(' ', '_')
            
            if normalized in subscribed_items:
                matched_items.append(f"‚öîÔ∏è {gear_name}: {quantity}")
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: {gear_name} -> {normalized}")
        
        if matched_items:
            print(f"  üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å {len(matched_items)} –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏")
            message = "üîî <b>–ê–≤—Ç–æ—Å—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b>\n\n"
            message += "–í –Ω–æ–≤–æ–º —Å—Ç–æ–∫–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n"
            message += "\n".join(matched_items)
            message += "\n\n/current - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–æ–∫"
            
            try:
                await telegram_bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='HTML'
                )
                print(f"  ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@bot.event
async def on_ready():
    global db
    
    print(f"‚úÖ –ë–æ—Ç {bot.user} –æ–Ω–ª–∞–π–Ω!")
    print(f"üìç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ ID: {CHANNEL_ID}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    db = get_db()
    
    print("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    print("=" * 60)
    print("üîç –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å 'Plants vs Brainrots Stock' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ...")
    print("-" * 60)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
    if message.channel.id != CHANNEL_ID:
        return
    
    if 'PVB Stock Alerts' not in message.author.name:
        return

    embed = message.embeds[0]
    seeds_stock = embed.fields[0].value
    gear_stock = embed.fields[1].value

    seeds_stock_list = seeds_stock.split("\n")
    seeds_stock = {}
    for seed in seeds_stock_list:
        seed_name = seed.split(">")[1].split("*")[0].strip()
        seed_value = int(seed.split("**x")[1][0])
        seeds_stock[seed_name] = seed_value

    gear_stock_list = gear_stock.split("\n")
    gear_stock = {}
    for gear in gear_stock_list:
        gear_name = gear.split(">")[1].split("*")[0].strip()
        gear_value = int(gear.split("**x")[1][0])
        gear_stock[gear_name] = gear_value

    stock_data = {
        "created_at": message.created_at,
        "seeds_stock": seeds_stock,
        "gear_stock": gear_stock
    }

    await db.stocks.insert_one(stock_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await send_notifications(stock_data)

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Plants vs Brainrots Stock Monitor (MongoDB)...")
        bot.run(DISCORD_TOKEN)
