import asyncio
import os
import logging
from datetime import datetime, timezone
from typing import List, Dict, Any
import aiohttp
from motor.motor_asyncio import AsyncIOMotorDatabase
from telegram import Bot
from telegram.error import TelegramError
from dotenv import load_dotenv
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from mongo_init import get_db

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_handlers = [logging.StreamHandler()]

# –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
try:
    os.makedirs('/app/logs', exist_ok=True)
    log_handlers.append(logging.FileHandler('/app/logs/parser_worker.log', encoding='utf-8'))
except (PermissionError, OSError) as e:
    print(f"Warning: Cannot create log file: {e}. Using console output only.")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=log_handlers
)
logger = logging.getLogger(__name__)

# URL API
API_URL = "https://plantsvsbrainrots.com/api/latest-message"
REQUEST_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥—ã


class StockParser:
    def __init__(self):
        self.db: AsyncIOMotorDatabase = None
        self.collection = None
        self.subscriptions_collection = None
        self.session: aiohttp.ClientSession = None
        self.bot: Bot = None
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.plant_mapping = {
            'sunflower': ['sunflower', 'üåª'],
            'pumpkin': ['pumpkin', 'üéÉ'],
            'dragon_fruit': ['dragon fruit', 'dragon', 'üêâ'],
            'eggplant': ['eggplant', 'üçÜ'],
            'cactus': ['cactus', 'üåµ'],
            'strawberry': ['strawberry', 'üçì'],
            'corn': ['corn', 'üåΩ'],
            'tomato': ['tomato', 'üçÖ'],
            'carrot': ['carrot', 'ü•ï'],
            'pepper': ['pepper', 'üå∂Ô∏è', 'üå∂'],
            "mango": ["mango", "ü•≠"]
        }
        
    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.db = get_db()
        self.collection = self.db.stock
        self.subscriptions_collection = self.db.plant_subscriptions
        self.session = aiohttp.ClientSession()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if bot_token:
            self.bot = Bot(token=bot_token)
            logger.info("Telegram bot initialized for notifications")
        else:
            logger.warning("TELEGRAM_BOT_TOKEN not set, notifications disabled")
            
        logger.info("Parser initialized successfully")
        
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self.session:
            await self.session.close()
            
    async def fetch_stocks(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        try:
            async with self.session.get(API_URL, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"Fetched {len(data)} stock updates")
                    return data
                else:
                    logger.error(f"API returned status {response.status}")
                    return []
        except Exception as e:
            logger.error(f"Error fetching stocks: {e}")
            return []
            
    async def process_stock(self, stock_data: Dict[str, Any], is_active: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–∫–∞"""
        stock_id = stock_data.get('id')
        if not stock_id:
            logger.warning("Stock without ID skipped")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∫–∞
        existing_stock = await self.collection.find_one({'id': stock_id})
        if existing_stock:
            # –ï—Å–ª–∏ —Å—Ç–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ active –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if is_active and not existing_stock.get('active', False):
                await self.collection.update_one(
                    {'id': stock_id},
                    {'$set': {'active': True}}
                )
                logger.info(f"Updated stock {stock_id} as active")
            return
            
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        stock_document = {
            'id': stock_id,
            'content': stock_data.get('content', ''),
            'createdAt': stock_data.get('createdAt'),
            'embeds': stock_data.get('embeds', []),
            'active': is_active,
            'parsed_at': datetime.now(timezone.utc)
        }
        
        # –ü–∞—Ä—Å–∏–º –ø–æ–ª—è –∏–∑ embeds –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        plants_data = []
        
        if stock_document['embeds'] and len(stock_document['embeds']) > 0:
            embed = stock_document['embeds'][0]
            fields = embed.get('fields', [])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–æ–∫–∞
            for field in fields:
                plant_info = {
                    'name': field.get('name', ''),
                    'value': field.get('value', '')
                }
                plants_data.append(plant_info)
            
            stock_document['timestamp'] = embed.get('timestamp')
            stock_document['title'] = embed.get('title')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è - 4 –∫–∞–∫—Ç—É—Å–∞ –∏ 3 –∫–ª—É–±–Ω–∏–∫–∏ (–≤—Å–µ–≥–¥–∞)
        plants_data.append({
            'name': 'üåµ üåµ üåµ üåµ Cactus',
            'value': '+4 stock'
        })
        plants_data.append({
            'name': 'üçì üçì üçì Strawberry',
            'value': '+3 stock'
        })
        
        stock_document['plants_data'] = plants_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await self.collection.insert_one(stock_document)
        logger.info(f"Saved new stock {stock_id} (active={is_active})")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–∫ –∏ –µ—Å—Ç—å –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if is_active and self.bot:
            await self.send_plant_notifications(stock_document)
    
    async def send_plant_notifications(self, stock: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –≤ —Å—Ç–æ–∫–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–∫–∞
        plants_in_stock = self.extract_plants_from_stock(stock)
        
        if not plants_in_stock:
            logger.info("No plants found in stock for notifications")
            return
        
        logger.info(f"Plants in stock: {plants_in_stock}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        subscribers = await self.subscriptions_collection.find({'plants': {'$exists': True, '$ne': []}}).to_list(length=None)
        
        if not subscribers:
            logger.info("No subscribers found")
            return
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å—Ç–æ–∫–µ
        notifications_sent = 0
        for subscriber in subscribers:
            user_id = subscriber.get('user_id')
            subscribed_plants = subscriber.get('plants', [])
            
            if not user_id or not subscribed_plants:
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ —Å—Ç–æ–∫–µ
            matched_plants = [plant for plant in subscribed_plants if plant in plants_in_stock]
            
            if matched_plants:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = self.format_plant_notification(stock, matched_plants, plants_in_stock)
                
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    notifications_sent += 1
                    logger.info(f"Sent notification to user {user_id} about plants: {matched_plants}")
                except TelegramError as e:
                    logger.error(f"Failed to send notification to user {user_id}: {e}")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏
                    if "blocked" in str(e).lower() or "user not found" in str(e).lower():
                        await self.subscriptions_collection.delete_one({'user_id': user_id})
                        logger.info(f"Removed subscriptions for blocked user {user_id}")
        
        logger.info(f"Sent {notifications_sent} plant notifications")
    
    def extract_plants_from_stock(self, stock: Dict[str, Any]) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–∫–∞"""
        found_plants = set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º plants_data
        plants_data = stock.get('plants_data', [])
        for plant_info in plants_data:
            plant_name = plant_info.get('name', '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
            for plant_id, keywords in self.plant_mapping.items():
                for keyword in keywords:
                    if keyword.lower() in plant_name:
                        found_plants.add(plant_id)
                        break
        
        return list(found_plants)
    
    def format_plant_notification(self, stock: Dict[str, Any], matched_plants: List[str], all_plants: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
        plant_emojis = {
            'sunflower': 'üåª',
            'pumpkin': 'üéÉ',
            'dragon_fruit': 'üêâ',
            'eggplant': 'üçÜ',
            'cactus': 'üåµ',
            'strawberry': 'üçì',
            'corn': 'üåΩ',
            'tomato': 'üçÖ',
            'carrot': 'ü•ï',
            'pepper': 'üå∂Ô∏è',
            'mango': 'ü•≠'
        }
        
        message_parts = ["üéØ <b>–í–ê–®–ò –†–ê–°–¢–ï–ù–ò–Ø –í –°–¢–û–ö–ï!</b>\n"]
        
        # –î–∞—Ç–∞
        created_at = stock.get('createdAt', '')
        if created_at:
            try:
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M UTC')
                message_parts.append(f"üìÖ {formatted_date}\n")
            except:
                pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        message_parts.append("<b>–í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:</b>")
        for plant_id in matched_plants:
            emoji = plant_emojis.get(plant_id, 'üå±')
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
            plants_data = stock.get('plants_data', [])
            for plant_info in plants_data:
                plant_name = plant_info.get('name', '').lower()
                if any(keyword.lower() in plant_name for keyword in self.plant_mapping.get(plant_id, [])):
                    value = plant_info.get('value', '')
                    message_parts.append(f"{emoji} {plant_info.get('name', '')}: <b>{value}</b>")
                    break
        
        message_parts.append("\n<b>–í–µ—Å—å —Å—Ç–æ–∫:</b>")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å—Ç–æ–∫–µ
        plants_data = stock.get('plants_data', [])
        for plant_info in plants_data:
            name = plant_info.get('name', '')
            value = plant_info.get('value', '')
            message_parts.append(f"{name}: {value}")
        
        return "\n".join(message_parts)
            
    async def deactivate_old_stocks(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–∫–æ–≤"""
        result = await self.collection.update_many(
            {'active': True},
            {'$set': {'active': False}}
        )
        if result.modified_count > 0:
            logger.info(f"Deactivated {result.modified_count} old active stocks")
            
    async def run_parser(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–µ—Ä–∞"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
                stocks = await self.fetch_stocks()
                
                if stocks:
                    # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–∫–∏
                    await self.deactivate_old_stocks()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∫–∏
                    for index, stock in enumerate(stocks):
                        # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–∫
                        is_active = (index == 0)
                        await self.process_stock(stock, is_active)
                        
                logger.info(f"Parser cycle completed. Next run in {REQUEST_INTERVAL} seconds")
                
            except Exception as e:
                logger.error(f"Error in parser cycle: {e}")
                
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(REQUEST_INTERVAL)
            
    async def create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –ò–Ω–¥–µ–∫—Å –ø–æ id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await self.collection.create_index('id', unique=True)
        # –ò–Ω–¥–µ–∫—Å –ø–æ active –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–∫–æ–≤
        await self.collection.create_index('active')
        # –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        await self.collection.create_index([('createdAt', -1)])
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        await self.subscriptions_collection.create_index('user_id', unique=True)
        await self.subscriptions_collection.create_index('plants')
        
        logger.info("Database indexes created")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = StockParser()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await parser.init()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await parser.create_indexes()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        logger.info("Starting stock parser...")
        await parser.run_parser()
        
    except KeyboardInterrupt:
        logger.info("Parser stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
    finally:
        await parser.close()


if __name__ == "__main__":
    asyncio.run(main())
