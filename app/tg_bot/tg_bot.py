import os
import asyncio
from datetime import datetime, timezone
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from dotenv import load_dotenv
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)


from bson import ObjectId
from motor.motor_asyncio import AsyncIOMotorDatabase as MotorDatabase

from mongo_init import get_db

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
STOCKS_PER_PAGE = 5


class StockBot:
    def __init__(self):
        self.db: MotorDatabase = get_db()
        self.stock_collection = self.db.stock
        self.subscriptions_collection = self.db.plant_subscriptions
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        self.available_plants = {
            'sunflower': {'emoji': 'üåª', 'name': 'Sunflower'},
            'pumpkin': {'emoji': 'üéÉ', 'name': 'Pumpkin'},
            'dragon_fruit': {'emoji': 'üêâ', 'name': 'Dragon Fruit'},
            'eggplant': {'emoji': 'üçÜ', 'name': 'Eggplant'},
            'cactus': {'emoji': 'üåµ', 'name': 'Cactus'},
            'strawberry': {'emoji': 'üçì', 'name': 'Strawberry'},
            'corn': {'emoji': 'üåΩ', 'name': 'Corn'},
            'tomato': {'emoji': 'üçÖ', 'name': 'Tomato'},
            'carrot': {'emoji': 'ü•ï', 'name': 'Carrot'},
            'pepper': {'emoji': 'üå∂Ô∏è', 'name': 'Pepper'}
        }
        
    def format_stock(self, stock: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        message_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        created_at = stock.get('createdAt', '')
        if created_at:
            try:
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M UTC')
                message_parts.append(f"üìÖ <b>{formatted_date}</b>")
            except:
                message_parts.append(f"üìÖ <b>{created_at}</b>")
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if stock.get('active'):
            message_parts.append("‚úÖ <b>–¢–ï–ö–£–©–ò–ô –ê–ö–¢–ò–í–ù–´–ô –°–¢–û–ö</b>")
        
        # ID —Å—Ç–æ–∫–∞ - —É–±—Ä–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # message_parts.append(f"üÜî ID: <code>{stock.get('id', 'N/A')}</code>")
        message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
        plants_data = stock.get('plants_data', [])
        if plants_data:
            message_parts.append("<b>üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∫–∞:</b>")
            for plant in plants_data:
                name = plant.get('name', '')
                value = plant.get('value', '')
                message_parts.append(f"{name}: <b>{value}</b>")
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ embeds
            embeds = stock.get('embeds', [])
            if embeds and len(embeds) > 0:
                fields = embeds[0].get('fields', [])
                if fields:
                    message_parts.append("<b>üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∫–∞:</b>")
                    for field in fields:
                        name = field.get('name', '')
                        value = field.get('value', '')
                        message_parts.append(f"{name}: <b>{value}</b>")
        
        return "\n".join(message_parts)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [KeyboardButton("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫")],
            [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤")],
            [KeyboardButton("üîî –ê–≤—Ç–æ—Å—Ç–æ–∫")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_message = (
            "üå± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants vs Brainrots Stock Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∫–æ–≤.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /current - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–∫\n"
            "‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å—Ç–æ–∫–æ–≤\n"
            "‚Ä¢ /autostock - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def current_stock_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–∫"""
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–∫
        current_stock = await self.stock_collection.find_one({'active': True})
        
        if current_stock:
            message = self.format_stock(current_stock)
            await update.message.reply_text(message, parse_mode='HTML')
        else:
            await update.message.reply_text(
                "‚ùå <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                parse_mode='HTML'
            )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–æ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        await self.show_stocks_page(update, context, page=0)
    
    async def show_stocks_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Ç–æ–∫–∞–º–∏"""
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–∫–æ–≤
        total_stocks = await self.stock_collection.count_documents({})
        
        if total_stocks == 0:
            await update.message.reply_text(
                "üì≠ <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤ –ø—É—Å—Ç–∞</b>\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –ø–∞—Ä—Å–µ—Ä —Å–æ–±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ.",
                parse_mode='HTML'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        skip = page * STOCKS_PER_PAGE
        stocks = await self.stock_collection.find({}).sort('createdAt', -1).skip(skip).limit(STOCKS_PER_PAGE).to_list(length=STOCKS_PER_PAGE)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = [f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})</b>\n"]
        
        for i, stock in enumerate(stocks, 1):
            message_parts.append(f"\n{'='*30}\n")
            message_parts.append(self.format_stock(stock))
        
        message = "\n".join(message_parts)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message, 
                parse_mode='HTML'
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                message,
                parse_mode='HTML'
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        data = query.data
        
        if data == "noop":
            await query.answer()
            return
        
        if data.startswith("page_"):
            page = int(data.split("_")[1])
            await self.show_stocks_page(update, context, page)
        elif data.startswith("refresh_"):
            page = int(data.split("_")[1])
            await self.show_stocks_page(update, context, page)
            await query.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!")
        elif data == "autostock_menu":
            await self.show_autostock_menu(update, context)
        elif data.startswith("toggle_plant_"):
            plant_id = data.replace("toggle_plant_", "")
            await self.toggle_plant_subscription(update, context, plant_id)
        elif data == "clear_subscriptions":
            await self.clear_all_subscriptions(update, context)
    
    async def autostock_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–º"""
        await self.show_autostock_menu(update, context, from_command=True)
    
    async def show_autostock_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, from_command: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sub = await self.subscriptions_collection.find_one({'user_id': user_id})
        subscribed_plants = user_sub.get('plants', []) if user_sub else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
        keyboard = []
        row = []
        
        for plant_id, plant_info in self.available_plants.items():
            is_subscribed = plant_id in subscribed_plants
            button_text = f"{'‚úÖ' if is_subscribed else '‚ùå'} {plant_info['emoji']} {plant_info['name']}"
            callback_data = f"toggle_plant_{plant_id}"
            
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
            
            # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(row) == 2:
                keyboard.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if row:
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        if subscribed_plants:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="clear_subscriptions")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–º</b>\n\n"
        
        if subscribed_plants:
            message += f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {len(subscribed_plants)} —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
            message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å—Ç–æ–∫–µ.\n\n"
        else:
            message += "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ.\n\n"
        
        message += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if from_command:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            await update.callback_query.answer()
    
    async def toggle_plant_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plant_id: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if plant_id not in self.available_plants:
            await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        user_sub = await self.subscriptions_collection.find_one({'user_id': user_id})
        subscribed_plants = user_sub.get('plants', []) if user_sub else []
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        plant_info = self.available_plants[plant_id]
        if plant_id in subscribed_plants:
            subscribed_plants.remove(plant_id)
            await update.callback_query.answer(f"‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {plant_info['emoji']} {plant_info['name']}")
        else:
            subscribed_plants.append(plant_id)
            await update.callback_query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {plant_info['emoji']} {plant_info['name']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await self.subscriptions_collection.update_one(
            {'user_id': user_id},
            {
                '$set': {
                    'user_id': user_id,
                    'username': username,
                    'plants': subscribed_plants,
                    'updated_at': datetime.utcnow()
                }
            },
            upsert=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await self.show_autostock_menu(update, context)
    
    async def clear_all_subscriptions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        await self.subscriptions_collection.delete_one({'user_id': user_id})
        
        await update.callback_query.answer("üóëÔ∏è –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await self.show_autostock_menu(update, context)
    
    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)"""
        text = update.message.text
        
        if text == "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫":
            await self.current_stock_command(update, context)
        elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤":
            await self.history_command(update, context)
        elif text == "üîî –ê–≤—Ç–æ—Å—Ç–æ–∫":
            await self.autostock_command(update, context)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/current - —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
                "/history - –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤\n"
                "/autostock - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–º"
            )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = StockBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", bot.start_command))
    app.add_handler(CommandHandler("current", bot.current_stock_command))
    app.add_handler(CommandHandler("history", bot.history_command))
    app.add_handler(CommandHandler("autostock", bot.autostock_command))
    app.add_handler(CallbackQueryHandler(bot.button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.text_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

