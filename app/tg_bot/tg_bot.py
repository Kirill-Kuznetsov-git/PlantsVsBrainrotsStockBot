import os
import asyncio
from datetime import datetime, timezone
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from dotenv import load_dotenv
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)


from bson import ObjectId
from motor.motor_asyncio import AsyncIOMotorDatabase as MotorDatabase

from mongo_init import get_db

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
STOCKS_PER_PAGE = 6  # –¢–µ–∫—É—â–∏–π + 5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö


class StockBot:
    def __init__(self):
        self.db: MotorDatabase = get_db()
        self.stock_collection = self.db.stocks
        self.subscriptions_collection = self.db.plant_subscriptions
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º –∏ seeds –∏ gear
        self.available_items = {
            # Seeds
            'sunflower': {'emoji': 'üåª', 'name': 'Sunflower', 'type': 'seed'},
            'pumpkin': {'emoji': 'üéÉ', 'name': 'Pumpkin', 'type': 'seed'},
            'dragon_fruit': {'emoji': 'üêâ', 'name': 'Dragon Fruit', 'type': 'seed'},
            'eggplant': {'emoji': 'üçÜ', 'name': 'Eggplant', 'type': 'seed'},
            'cactus': {'emoji': 'üåµ', 'name': 'Cactus', 'type': 'seed'},
            'strawberry': {'emoji': 'üçì', 'name': 'Strawberry', 'type': 'seed'},
            'corn': {'emoji': 'üåΩ', 'name': 'Corn', 'type': 'seed'},
            'tomato': {'emoji': 'üçÖ', 'name': 'Tomato', 'type': 'seed'},
            'carrot': {'emoji': 'ü•ï', 'name': 'Carrot', 'type': 'seed'},
            'pepper': {'emoji': 'üå∂Ô∏è', 'name': 'Pepper', 'type': 'seed'},
            # Gear
            'common_chest': {'emoji': 'üì¶', 'name': 'Common Chest', 'type': 'gear'},
            'rare_chest': {'emoji': 'üíé', 'name': 'Rare Chest', 'type': 'gear'},
            'legendary_chest': {'emoji': 'üëë', 'name': 'Legendary Chest', 'type': 'gear'},
            'fertilizer': {'emoji': 'üí©', 'name': 'Fertilizer', 'type': 'gear'},
            'water_can': {'emoji': 'üíß', 'name': 'Water Can', 'type': 'gear'},
            'shovel': {'emoji': 'üîß', 'name': 'Shovel', 'type': 'gear'}
        }
        
    def format_stock(self, stock: dict, is_current: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        message_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π
        created_at = stock.get('created_at')
        if created_at:
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
                if isinstance(created_at, datetime):
                    dt = created_at
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    dt = datetime.fromisoformat(str(created_at).replace('Z', '+00:00'))
                formatted_date = dt.strftime('%d.%m.%Y %H:%M UTC')
                message_parts.append(f"üìÖ <b>{formatted_date}</b>")
            except:
                message_parts.append(f"üìÖ <b>{created_at}</b>")
        
        # –°—Ç–∞—Ç—É—Å
        if is_current:
            message_parts.append("‚úÖ <b>–¢–ï–ö–£–©–ò–ô –°–¢–û–ö</b>")
        
        message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –°–µ–º–µ–Ω–∞
        seeds_stock = stock.get('seeds_stock', {})
        if seeds_stock:
            message_parts.append("<b>üå± –°–µ–º–µ–Ω–∞:</b>")
            for seed_name, quantity in seeds_stock.items():
                # –ù–∞—Ö–æ–¥–∏–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–µ–º–µ–Ω–∏
                emoji = ''
                for item_id, item_info in self.available_items.items():
                    if item_info['name'].lower() == seed_name.lower() and item_info['type'] == 'seed':
                        emoji = item_info['emoji'] + ' '
                        break
                message_parts.append(f"{emoji}{seed_name}: <b>{quantity}</b>")
        
        # –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        gear_stock = stock.get('gear_stock', {})
        if gear_stock:
            message_parts.append("\n<b>‚öîÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:</b>")
            for gear_name, quantity in gear_stock.items():
                # –ù–∞—Ö–æ–¥–∏–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
                emoji = ''
                for item_id, item_info in self.available_items.items():
                    if item_info['name'].lower() == gear_name.lower() and item_info['type'] == 'gear':
                        emoji = item_info['emoji'] + ' '
                        break
                message_parts.append(f"{emoji}{gear_name}: <b>{quantity}</b>")
        
        return "\n".join(message_parts)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [KeyboardButton("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫")],
            [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤")],
            [KeyboardButton("üîî –ê–≤—Ç–æ—Å—Ç–æ–∫")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_message = (
            "üå± <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants vs Brainrots Stock Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∫–æ–≤.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /current - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
            "‚Ä¢ /history - –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤\n"
            "‚Ä¢ /autostock - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    async def current_stock_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ (—Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ created_at)"""
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–∫ —Å —Å–∞–º—ã–º –ø–æ–∑–¥–Ω–∏–º created_at
        current_stock = await self.stock_collection.find_one(
            {},
            sort=[('created_at', -1)]
        )
        
        if current_stock:
            message = self.format_stock(current_stock, is_current=True)
            await update.message.reply_text(message, parse_mode='HTML')
        else:
            await update.message.reply_text(
                "‚ùå <b>–°—Ç–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                parse_mode='HTML'
            )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–æ–∫–æ–≤ (—Ç–µ–∫—É—â–∏–π + 5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)"""
        # –ü–æ–ª—É—á–∞–µ–º 6 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–æ–∫–æ–≤
        stocks = await self.stock_collection.find({}).sort('created_at', -1).limit(STOCKS_PER_PAGE).to_list(length=STOCKS_PER_PAGE)
        
        if not stocks:
            await update.message.reply_text(
                "üì≠ <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤ –ø—É—Å—Ç–∞</b>\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –ø–∞—Ä—Å–µ—Ä —Å–æ–±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ.",
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = ["üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤</b>\n"]
        
        for i, stock in enumerate(stocks):
            message_parts.append(f"\n{'='*30}\n")
            # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–∫ - —Ç–µ–∫—É—â–∏–π
            message_parts.append(self.format_stock(stock, is_current=(i == 0)))
        
        message = "\n".join(message_parts)
        
        await update.message.reply_text(
            message,
            parse_mode='HTML'
        )
    
    async def autostock_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–º"""
        await self.show_autostock_menu(update, context, from_command=True)
    
    async def show_autostock_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, from_command: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sub = await self.subscriptions_collection.find_one({'user_id': user_id})
        subscribed_items = user_sub.get('items', []) if user_sub else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        keyboard = []
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–µ–º–µ–Ω–∞
        keyboard.append([InlineKeyboardButton("üå± –°–ï–ú–ï–ù–ê", callback_data="noop")])
        row = []
        for item_id, item_info in self.available_items.items():
            if item_info['type'] == 'seed':
                is_subscribed = item_id in subscribed_items
                button_text = f"{'‚úÖ' if is_subscribed else '‚ùå'} {item_info['emoji']} {item_info['name']}"
                callback_data = f"toggle_item_{item_id}"
                
                row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
        
        if row:
            keyboard.append(row)
        
        # –ó–∞—Ç–µ–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        keyboard.append([InlineKeyboardButton("‚öîÔ∏è –°–ù–ê–†–Ø–ñ–ï–ù–ò–ï", callback_data="noop")])
        row = []
        for item_id, item_info in self.available_items.items():
            if item_info['type'] == 'gear':
                is_subscribed = item_id in subscribed_items
                button_text = f"{'‚úÖ' if is_subscribed else '‚ùå'} {item_info['emoji']} {item_info['name']}"
                callback_data = f"toggle_item_{item_id}"
                
                row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
        
        if row:
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        if subscribed_items:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="clear_subscriptions")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–º</b>\n\n"
        
        if subscribed_items:
            message += f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {len(subscribed_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
            message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å—Ç–æ–∫–µ.\n\n"
        else:
            message += "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.\n\n"
        
        message += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if from_command:
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
            await update.callback_query.answer()
    
    async def toggle_item_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if item_id not in self.available_items:
            await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        user_sub = await self.subscriptions_collection.find_one({'user_id': user_id})
        subscribed_items = user_sub.get('items', []) if user_sub else []
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        item_info = self.available_items[item_id]
        if item_id in subscribed_items:
            subscribed_items.remove(item_id)
            await update.callback_query.answer(f"‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {item_info['emoji']} {item_info['name']}")
        else:
            subscribed_items.append(item_id)
            await update.callback_query.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {item_info['emoji']} {item_info['name']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await self.subscriptions_collection.update_one(
            {'user_id': user_id},
            {
                '$set': {
                    'user_id': user_id,
                    'username': username,
                    'items': subscribed_items,
                    'updated_at': datetime.utcnow()
                }
            },
            upsert=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await self.show_autostock_menu(update, context)
    
    async def clear_all_subscriptions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        await self.subscriptions_collection.delete_one({'user_id': user_id})
        
        await update.callback_query.answer("üóëÔ∏è –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await self.show_autostock_menu(update, context)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        data = query.data
        
        if data == "noop":
            await query.answer()
            return
        
        if data.startswith("toggle_item_"):
            item_id = data.replace("toggle_item_", "")
            await self.toggle_item_subscription(update, context, item_id)
        elif data == "clear_subscriptions":
            await self.clear_all_subscriptions(update, context)
    
    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)"""
        text = update.message.text
        
        if text == "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫":
            await self.current_stock_command(update, context)
        elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤":
            await self.history_command(update, context)
        elif text == "üîî –ê–≤—Ç–æ—Å—Ç–æ–∫":
            await self.autostock_command(update, context)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/current - —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
                "/history - –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–æ–∫–æ–≤\n"
                "/autostock - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–º"
            )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = StockBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", bot.start_command))
    app.add_handler(CommandHandler("current", bot.current_stock_command))
    app.add_handler(CommandHandler("history", bot.history_command))
    app.add_handler(CommandHandler("autostock", bot.autostock_command))
    app.add_handler(CallbackQueryHandler(bot.button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.text_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

